openapi: 3.0.0
info:
  title: Grid Dynamics Internship -  Hospital Management
  description: |-
    A simple application demo for hospital management created at the Grid Dynamics Java internship. The app uses Java 17, Spring boot, Gradle, Hibernate, Postgres + database migration tool (Liquibase), Lombok, Swagger.
  version: 0.0.1
servers:
  - url: https://localhost:8080
tags:
  - name: Doctors
    description: Available commands for doctors
  - name: Nurses
    description: Available commands for nurses
  - name: Admin
    description: Available commands for admin / auth
paths:
  /treatments:
    get:
      tags:
        - Doctors
      summary: Get all treatments
      description: ''
      operationId: getAllTreatments
      responses:
        '200':
          description: All treatments successfully fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Treatment'
  /patients:
    get:
      tags:
        - Doctors
        - Nurses
      summary: Get all patient files
      description: ''
      operationId: getAllPatients
      responses:
        '200':
          description: Patient files successfully fetched
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Patient'
    post:
      tags:
        - Doctors
      summary: Add a patient
      description: Adds provided patient to database
      operationId: addPatient
      requestBody:
        description: Patient info to be added to the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPatient'
      responses:
        '200':
          description: Patient successfully added to database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
  /patients/{patientId}:
    get:
      tags:
        - Doctors
        - Nurses
      summary: Get patient file with the given ID
      description: ''
      operationId: getPatient
      parameters:
        - name: patientId
          in: path
          description: Unique patient identifier from Patients table
          required: true
          schema:
            type: string
            example: UUID
      responses:
        '200':
          description: Patient file successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
    put:
      tags:
        - Doctors
      summary: Edit patient file of the given ID
      description: ''
      operationId: editPatient
      parameters:
        - name: patientId
          in: path
          description: ID of the patient that will be edited
          required: true
          schema:
            type: string
            example: UUID
      requestBody:
        description: Patient's JSON file that will replace existing one
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPatient'

      responses:
        '200':
          description: patient successfully modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
    delete:
      tags:
        - Doctors
      summary: Discharge a patient by given ID
      description: Deletes any prescriptions under the given insurance number, subsequently all related events.
      operationId: dischargePatientByInsurance
      parameters:
        - name: patientId
          in: path
          description: The patient's unique identifier found on the Patients table.
          required: true
          schema:
            type: string
            example: UUID
      responses:
        '200':
          description: Successfully discharged patient
  /patients/{patientId}/events:
    get:
      tags:
        - Doctors
        - Nurses
      summary: Get all events for a patient with given ID
      description: ''
      operationId: getAllEventsFor
      parameters:
        - name: patientId
          in: path
          required: true
          description: Unique patient identifier in patients table
          schema:
            type: string
            example: UUID
      responses:
        '200':
          description: All events successfully fetched for patient ID
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
  /patients/{patientId}/prescriptions:
    get:
      tags:
        - Doctors
        - Nurses
      summary: Get prescriptions for the patient with the given ID
      description: ''
      operationId: getPrescriptionsOf
      parameters:
        - name: patientId
          in: path
          description: Unique patient identifier from Patients table
          required: true
          schema:
            type: string
            example: UUID
      responses:
        '200':
          description: Successfully fetched prescriptions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Prescription'
    post:
      tags:
        - Doctors
      summary: Prescribe procedures or medication
      description: Prescription is for the patient
      operationId: createPrescription
      parameters:
        - name: patientId
          in: path
          description: UUID of patient that will be prescribed
          required: true
          schema:
            type: string
            example: UUID
      requestBody:
        description: Created prescription object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPrescription'
      responses:
        '200':
          description: Successfully added prescription
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prescription'
  /prescriptions/{prescriptionId}:
    get:
      tags:
        - Doctors
        - Nurses
      summary: Get prescription info of given prescription ID
      description: ''
      operationId: getPrescription
      parameters:
        - name: prescriptionId
          in: path
          description: Unique prescription identifier in Prescriptions table
          required: true
          schema:
            type: string
            example: UUID
      responses:
        '200':
          description: Prescription successfully fetched
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prescription'
    put:
      tags:
        - Doctors
      summary: Modify a given prescription
      description: Edit prescription (appointment) by ID, prescription parameter and its value
      operationId: modifyPrescription
      parameters:
        - name: prescriptionId
          in: path
          description: Unique id of the prescription that will be modified
          required: true
          schema:
            type: string
            example: UUID
      requestBody:
        description: Prescription JSON file that will replace the one with the provided ID.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPrescription'
      responses:
        '200':
          description: Prescription successfully modified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Prescription'
    delete:
      tags:
        - Doctors
      summary: Delete the given ID's prescription
      description: ''
      operationId: deletePrescriptionById
      parameters:
        - name: prescriptionId
          in: path
          description: The given prescription's ID in Prescriptions table
          required: true
          schema:
            type: string
            example: UUID
      responses:
        '200':
          description: Prescription successfully removed
  /events/{eventId}:
    put:
      tags:
        - Doctors
        - Nurses
      summary: Modify an event's parameters
      description: ''
      operationId: modEvent
      parameters:
        - name: eventId
          in: path
          description: Unique event ID of the event that will be modified
          required: true
          schema:
            type: string
            example: UUID
      requestBody:
        description: Event JSON file that will replace the entry at given Event ID
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewEvent'
      responses:
        '200':
          description: Operation Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
  /events/{eventId}/cancel:
    put:
      tags:
        - Nurses
      summary: Cancel given event
      description: ''
      operationId: cancelEvent
      parameters:
        - name: eventId
          in: path
          description: ID of the event that will be canceled
          required: true
          schema:
            type: string
            example: UUID
        - name: cancelReason
          in: query
          description: Reason for cancelling the event
          required: true
          schema:
            type: string
            example: Doctor's orders
            default: Not Specified
      responses:
        '200':
          description: Successfully canceled event
  /users:
    post:
      tags:
        - Admin
      summary: Create new user
      description: ''
      operationId: createUser
      requestBody:
        description: User Object that will be passed for creation
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUser'
      responses:
        '200':
          description: Successfully created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
  /auth/login:
    post:
      tags:
        - Admin
      summary: Authenticate with given username and password
      description: ''
      operationId: login
      parameters:
        - name: user
          in: query
          description: Username
          required: true
          schema:
            type: string
            example: ao123
        - name: password
          in: query
          description: Password
          required: true
          schema:
            type: string
            format: password
            example: pass123$
      responses:
        '200':
          description: Successful Authentication, providing token
          content:
            text/plain:
              schema:
                type: string
                example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTIzNDU2Nzg5LCJuYW1lIjoiSm9zZXBoIn0.OpOSSw7e485LOP5PrzScxHb7SR6sAOMRckfFwi4rp7o

components:
  schemas:
    Patient:
      type: object
      properties:
        id:
          type: string
          example: UUID
        name:
          type: string
          description: Name of the patient
          example: John Smith
        diagnosis:
          type: string
          description: Patient's diagnosis
          example: Tuberculosis
        insuranceNumber:
          type: string
          example: AO8323
        doctorId:
          type: string
          description: UUID
        status:
          type: string
          description: patient's treatment progress
          example: In treatment
          enum:
            - In treatment
            - recovered
    NewPatient:
      type: object
      properties:
        name:
          type: string
          description: Name of the patient
          example: John Smith
        diagnosis:
          type: string
          description: Patient's diagnosis
          example: Tuberculosis
        insuranceNumber:
          type: integer
          format: int64
          example: 08323
        doctorId:
          type: string
          example: UUID
          description: doctor's id in doctor catalogue
        status:
          type: string
          description: patient's treatment progress
          example: In treatment
          enum:
            - In treatment
            - recovered
    NewPrescription:
      type: object
      properties:
        treatmentId:
          type: string
          example: UUID
          description: The prescribed treatment's unique id in catalogue.
        timePattern:
          type: string
          description: Frequency of treatment
          example: Once a day
        period:
          type: integer
          format: int64
          example: 5
          description: Duration of the treatment in days
    Prescription:
      type: object
      properties:
        id:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174000
        patientId:
          type: string
          example: 123e4547-e89b-12d3-a456-426614174000
          description: The patient's id in patients catalogue.
        treatmentId:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174233
          description: The prescribed treatment's unique id in catalogue.
        timePattern:
          type: string
          description: Frequency of treatment
          example: Once a day
        period:
          type: integer
          format: int64
          example: 5
          description: Duration of the treatment in days
        datePrescribed:
          type: string
          format: date-time
          description: Date and time of prescription
    NewEvent:
      type: object
      properties:
        prescriptionId:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174223
          description: Related prescription's id in Prescriptions table
        dateTime:
          type: string
          format: date-time
          description: Scheduled date and time for the event.
        status:
          type: string
          description: Current event status
          example: Done
          enum:
            - Scheduled
            - Done
    Event:
      type: object
      properties:
        id:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174233
          description: Unique event id
        prescriptionId:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174223
          description: Related prescription's id in Prescriptions table
        patientId:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174342
          description: Related patent's id in Patient table
        dateTime:
          type: string
          format: date-time
          description: Scheduled date and time for the event.
        status:
          type: string
          description: Current event status
          example: Cancelled
          enum:
            - Scheduled
            - Done
            - Cancelled
        cancelReason:
          type: string
          description: Reason for cancelling the event
          example: Doctor's orders
          default: n/a
    Treatment:
      type: object
      properties:
        id:
          type: string
          example: 123e4567-e89b-12d3-a456-4266141742334
          description: Unique treatment identifier in catalogue
        name:
          type: string
          example: Colonoscopy
          description: Name of procedure/medicine
        type:
          type: string
          description: Whether the treatment is a procedure or a medicine
          example: Procedure
          enum:
            - Procedure
            - Medicine
    NewUser:
      type: object
      properties:
        firstName:
          type: string
          example: John
          description: The user's first name
        lastName:
          type: string
          example: Doe
          description: The user's last name
        password:
          type: string
          format: password
          example: ao12!B45
          description: The user's password
        role:
          type: string
          example: admin
          description: User's authorization level
          enum:
            - admin
            - doctor
            - nurse
    UserResponse:
      properties:
        id:
          type: string
          example: 123e4567-e89b-12d3-a456-426614174233
          description: User's unique identifier in Users table
        firstName:
          type: string
          example: John
          description: The user's first name
        lastName:
          type: string
          example: Doe
          description: The user's last name
        userName:
          type: string
          example: dBowie
          description: Username
        password:
          type: string
          format: password
          example: ao12!B45
          description: The user's password
        createdAt:
          type: string
          format: date-time
          description: Date and time in which the User was created
        createdBy:
          type: string
          example: "drDooLittle"
          description: Username of this user's creator
        role:
          type: string
          example: admin
          description: User's authorization level
          enum:
            - admin
            - doctor
            - nurse
  requestBodies:
    Patient:
      description: Patient object that will be added to the database
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Patient'